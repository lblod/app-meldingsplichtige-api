(define-resource job ()
  :class (s-prefix "cogs:Job")
  :properties `((:created   :datetime ,(s-prefix "dct:created"))
                (:modified  :datetime ,(s-prefix "dct:modified")))
  :has-one `((service :via ,(s-prefix "dct:creator")
                      :as "creator")
             (job-status :via ,(s-prefix "adms:status")
                         :as "status")
             (job-operation :via ,(s-prefix "task:operation")
                            :as "operation")
             ;Not sure about this model, dependsOn needs to refer to the parent as well? The following refers to the child:
             ;(job :via ,(s-prefix "cogs:dependsOn")
             ;     :inverse t
             ;     :as "parent")
             (task :via ,(s-prefix "dct:isPartOf")
                   :as "parent")
             ;To check
             (job-error :via ,(s-prefix "task:error")
                        :as "error"))
  :has-many `(;(job :via ,(s-prefix "cogs:dependsOn")
              ;     :as "subjobs"))
              (task :via ,(s-prefix "dct:isPartOf")
                    :inverse t
                    :as "tasks"))
  :resource-base (s-url "http://redpencil.data.gift/id/job/")
  ;This one is more in line with what the automatic submission does, but it does not matter much as these jobs are readonly for mu-cl-resources
  ;:resource-base (s-url "http://data.lblod.info/id/automatic-submission-job/")
  :features '(include-uri)
  :on-path "jobs")

(define-resource task ()
  :class (s-prefix "task:Task")
  :properties `((:created   :datetime ,(s-prefix "dct:created"))
                (:modified  :datetime ,(s-prefix "dct:modified"))
                (:index     :string   ,(s-prefix "task:index")))
  :has-one `((job-status :via ,(s-prefix "adms:status")
                         :as "status")
             (job-operation :via ,(s-prefix "task:operation")
                            :as "operation")
             (job-error :via ,(s-prefix "task:error")
                        :as "error")
             (job :via ,(s-prefix "dct:isPartOf")
                  :as "job"))
  :has-many `(
              ;(task :via ,(s-prefix "cogs:dependsOn")
              ;      :as "parent-tasks")
              (data-container :via ,(s-prefix "task:resultsContainer")
                    :as "results-containers")
              (data-container :via ,(s-prefix "task:inputContainer")
                    :as "input-containers"))
  :resource-base (s-url "http://redpencil.data.gift/id/task/")
  :features '(include-uri)
  :on-path "tasks")

(define-resource service ()
  :class (s-prefix "services:Service")
  :properties `((:label          :string ,(s-prefix "rdfs:label"))
                (:comment        :string ,(s-prefix "rdfs:comment"))
                (:codeRepository :string ,(s-prefix "schema:codeRepository")))
  :resource-base (s-url "http://data.lblod.info/id/services")
  :features '(include-uri)
  :on-path "services")

(define-resource job-status ()
  :class (s-prefix "cogs:ExecutionStatus")
  :properties `((:label   :string ,(s-prefix "rdfs:label"))
                (:comment :string ,(s-prefix "rdfs:comment")))
  :resource-base (s-url "http://data.lblod.info/id/job-status")
  :features '(include-uri)
  :on-path "statuses")

(define-resource job-operation ()
  ;A task:Operation added to some Transformation and Operation classes in COGS
  :class (s-prefix "task:Operation")
  :properties `((:label   :string ,(s-prefix "rdfs:label"))
                (:comment :string ,(s-prefix "rdfs:comment")))
  :resource-base (s-url "http://data.lblod.info/id/operations")
  :features '(include-uri)
  :on-path "operations")

(define-resource job-error ()
  :class (s-prefix "oslc:Error")
  :properties `((:message :string ,(s-prefix "oslc:message")))
  :resource-base (s-url "http://redpencil.data.gift/id/jobs/error/")
  :features '(include-uri)
  :on-path "job-errors")

(define-resource data-container ()
  :class (s-prefix "nfo:DataContainer")
  :properties `((:has-graph :url ,(s-prefix "task:hasGraph")))
  :has-many `((file :via ,(s-prefix "task:hasFile") ;;subProperty of dct:hasPart because mu-resource does not like the same predicate linked to multiple types
                    :as "files")
              (harvesting-collection :via ,(s-prefix "task:hasHarvestingCollection")
                                     :as "harvesting-collections")
              (task :via ,(s-prefix "task:resultsContainer")
                    :inverse t
                    :as "result-from-tasks")
              (task :via ,(s-prefix "task:inputContainer")
                    :inverse t
                    :as "input-from-tasks"))
  :resource-base (s-url "http://redpencil.data.gift/id/dataContainers/")
  :features '(include-uri)
  :on-path "data-containers")

