(define-resource job ()
  :class (s-prefix "cogs:Job")
  :properties `((:created   :datetime ,(s-prefix "dct:created"))
                (:modified  :datetime ,(s-prefix "dct:modified"))
                ;Old model, still in use
                (:creator   :url      ,(s-prefix "dct:creator"))
                (:status    :url      ,(s-prefix "adms:status"))
                (:operation :string   ,(s-prefix "task:operation")))
 :has-one `(
            ;Proposed new model, also use migrations to supply data for these constant individuals
            ;(service :via ,(s-prefix "dct:creator")
            ;          :as "creator")
            ;(status :via ,(s-prefix "adms:status")
            ;        :as "status")
            ;(operation :via ,(s-prefix "task:operation")
            ;           :as "operation")
            ;To check
            (job-error :via ,(s-prefix "task:error")
                       :as "error"))
  :has-many `((task :via ,(s-prefix "dct:isPartOf")
                    :inverse t
                    :as "tasks"))
  :resource-base (s-url "http://redpencil.data.gift/id/job/")
  ;This one is more in line with what the automatic submission does, but it does not matter much as these jobs are readonly for mu-cl-resources
  ;:resource-base (s-url "http://data.lblod.info/id/automatic-submission-job/")
  :features '(include-uri)
  :on-path "jobs")

(define-resource task ()
  :class (s-prefix "task:Task")
  :properties `((:created   :datetime ,(s-prefix "dct:created"))
                (:modified  :datetime ,(s-prefix "dct:modified"))
                (:index     :string   ,(s-prefix "task:index"))
                ;Old model still in use
                (:operation :string   ,(s-prefix "task:operation"))
                (:status    :url      ,(s-prefix "adms:status")))
  :has-one `(
             ;Proposed new model
             ;(status :via ,(s-prefix "adms:status")
             ;            :as "status")
             ;(operation :via ,(s-prefix "task:operation")
             ;               :as "operation")
             (job-error :via ,(s-prefix "task:error")
                        :as "error")
             (job :via ,(s-prefix "dct:isPartOf")
                  :as "job"))
  :has-many `((task :via ,(s-prefix "cogs:dependsOn")
                    :as "parent-tasks")
              (data-container :via ,(s-prefix "task:resultsContainer")
                              :as "results-containers")
              (data-container :via ,(s-prefix "task:inputContainer")
                              :as "input-containers"))
  :resource-base (s-url "http://redpencil.data.gift/id/task/")
  :features '(include-uri)
  :on-path "tasks")

(define-resource service ()
  :class (s-prefix "services:Service")
  :properties `((:label          :string ,(s-prefix "rdfs:label"))
                (:comment        :string ,(s-prefix "rdfs:comment"))
                (:codeRepository :string ,(s-prefix "schema:codeRepository")))
  :resource-base (s-url "http://data.lblod.info/id/services")
  :features '(include-uri)
  :on-path "services")

(define-resource status ()
  :class (s-prefix "cogs:ExecutionStatus")
  :properties `((:label   :string ,(s-prefix "rdfs:label"))
                (:comment :string ,(s-prefix "rdfs:comment")))
  :resource-base (s-url "http://data.lblod.info/id/job-status")
  :features '(include-uri)
  :on-path "statuses")

(define-resource operation ()
  ;A task:Operation added to some Transformation and Operation classes in COGS
  :class (s-prefix "task:Operation")
  :properties `((:label   :string ,(s-prefix "rdfs:label"))
                (:comment :string ,(s-prefix "rdfs:comment")))
  :resource-base (s-url "http://data.lblod.info/id/operations")
  :features '(include-uri)
  :on-path "operations")

(define-resource job-error ()
  :class (s-prefix "oslc:Error")
  :properties `((:message :string ,(s-prefix "oslc:message")))
  :resource-base (s-url "http://redpencil.data.gift/id/jobs/error/")
  :features '(include-uri)
  :on-path "job-errors")

(define-resource data-container ()
  :class (s-prefix "nfo:DataContainer")
  :properties `((:has-graph :url ,(s-prefix "task:hasGraph")))
  :has-many `((file :via ,(s-prefix "task:hasFile") ;;subProperty of dct:hasPart because mu-resource does not like the same predicate linked to multiple types
                    :as "files")
              (harvesting-collection :via ,(s-prefix "task:hasHarvestingCollection")
                                     :as "harvesting-collections")
              (task :via ,(s-prefix "task:resultsContainer")
                    :inverse t
                    :as "result-from-tasks")
              (task :via ,(s-prefix "task:inputContainer")
                    :inverse t
                    :as "input-from-tasks"))
  :resource-base (s-url "http://redpencil.data.gift/id/dataContainers/")
  :features '(include-uri)
  :on-path "data-containers")

(define-resource harvesting-collection ()
  :class (s-prefix "hrvst:HarvestingCollection")
  :has-one `((service :via ,(s-prefix "dct:creator")
                      :as "creator")
             (status :via ,(s-prefix "adms:status")
                     :as "status"))
  :has-many `((remote-data-object :via ,(s-prefix "dct:hasPart")
                                  :as "remote-data-objects")
              (data-container :via ,(s-prefix "task:hasHarvestingCollection")
                              :inverse t
                              :as "data-container"))
  :resource-base (s-url "http://data.lblod.info/id/harvesting-collection/")
  :features '(include-uri)
  :on-path "harvesting-collections")

(define-resource remote-data-object ()
  :class (s-prefix "nfo:RemoteDataObject")
  :properties `((:source         :url      ,(s-prefix "nie:url"))
                (:created        :datetime ,(s-prefix "dct:created"))
                (:modified       :datetime ,(s-prefix "dct:modified"))
                (:request-header :url      ,(s-prefix "rpioHttp:requestHeader")))
  :has-one `((service :via ,(s-prefix "dct:creator")
                      :as "creator")
             (status :via ,(s-prefix "adms:status")
                     :as "status")
             (file :via ,(s-prefix "nie:dataSource")
                   :inverse t
                   :as "file")
             (harvesting-collection :via ,(s-prefix "dct:hasPart")
                                    :inverse t
                                    :as "harvesting-collection"))
  :resource-base (s-url "http://data.lblod.info/id/remote-data-objects/")
  :features `(include-uri)
  :on-path "remote-data-objects")

